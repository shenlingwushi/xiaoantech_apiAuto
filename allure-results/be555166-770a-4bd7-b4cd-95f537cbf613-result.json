{"name": "用户列表-加入分组", "status": "failed", "statusDetails": {"message": "AssertionError: 预期值: True, 实际值: False\nassert False == True", "trace": "self = <test_cases.test_all_case.TestCaseExe object at 0x00000207E1837710>\ncase = {'assert_key': 'suc', 'assert_value': True, 'case_name': '用户列表-加入分组', 'expected_status': 200, ...}\nmy_fixture_sys = 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwaG9uZSI6IjEzNzExMTExMTExIiwidGVuYW50SWQiOiIxNzE5MjQyYjgzMWExMWVkYTEwN...lkIjoiNGM3YWEyNjQ5NGQwNDFhOGIxNTZjNTRmNGJhZWZjZmMiLCJleHAiOjE3NDEzMzQ0NTl9.F-NIhe1DXodVxGUBQST9DJHQx0kHG_2oDQTDyHbHptc'\n\n    @allure.story(\"saasSystem接口测试\")\n    # @allure.title(\"{case_name}\")\n    @pytest.mark.parametrize(\"case\", test_sys_cases,ids=[case[\"case_name\"] for case in test_sys_cases])\n    def test_system(self, case, my_fixture_sys):\n        allure.dynamic.title(case[\"case_name\"])\n        with allure.step(\"准备请求数据\"):\n            method = case[\"method\"]\n            url = f'{read_config(\"general_url\")}' + case[\"url\"]\n            sys_headers = read_config(\"sys_header\")\n            sys_headers[\"Authorization\"] = my_fixture_sys\n            headers = sys_headers\n            params = case[\"params\"]\n            logger.info(f\"请求方法: {method}\")\n            logger.info(f\"请求URL: {url}\")\n            logger.info(f\"请求头: {headers}\")\n            logger.info(f\"请求参数: {params}\")\n    \n        if '/java/led/system/v1/platform/user/list' in case[\"url\"] and {\"pageSize\":\"50\",\"pageNum\":\"1\"} == case['params']:\n            with allure.step(\"发送请求\"):\n                response = requests.get(url, headers=headers, params=params)\n                # 获取第一个骑手的userId并写入配置文件\n                userId = response.json()['data']['list'][0][\"id\"]\n                if userId:\n                    config = configparser.ConfigParser()\n                    config.read(config_path)\n                    config['otherparams'][\"userid\"] = f'{userId}'\n                    logger.info(\"获取到骑手userId:\" + f'{userId}')\n                    with open(config_path, 'w') as configfile:\n                        config.write(configfile)\n                else:\n                    logger.info(\"未获取到骑手userId!\")\n    \n        elif '/java/led/system/v1/platform/cabinet/list' in case[\"url\"]:\n            with allure.step(\"发送请求\"):\n                response = requests.get(url, headers=headers, params=params)\n                # 获取第一个电柜的SN并写入配置文件\n                cabinetsn = response.json()['data']['list'][0][\"cabinetSN\"]\n                if cabinetsn:\n                    config = configparser.ConfigParser()\n                    config.read(config_path)\n                    config['otherparams'][\"cabinetsn\"] = f'{cabinetsn}'\n                    logger.info(\"获取到电柜SN:\" + f'{cabinetsn}')\n                    with open(config_path, 'w') as configfile:\n                        config.write(configfile)\n                else:\n                    logger.info(\"未获取到电柜SN!\")\n    \n        elif '/java/led/system/v1/platform/excel/exportList' in case['url'] and (0 < int(case['params']['fileType']) < 101 ):\n            with allure.step(\"发送请求\"):\n                response = requests.get(url, headers=headers, params=params)\n                # 获取用户报表的第1个文件信息\n                subDir = response.json()['data']['list'][0][\"subDir\"]\n                file_name = response.json()['data']['list'][0][\"name\"]\n                encoded = quote(file_name[:4],encoding = 'utf-8')\n                file_path = 'https://xc-led.oss-cn-hangzhou.aliyuncs.com/exportFiles/' + subDir + '/' + encoded + file_name[-20:]\n                download_excel(file_path,file_name)\n                print(\"这里是从用例处进行调用\")\n                logger.info(f\"响应状态码: {response.status_code}\")\n                logger.info(f\"响应内容: {response.json()}\")\n    \n        else:\n            with allure.step(\"发送请求\"):\n                if method.upper() == \"GET\":\n                    response = requests.get(url, headers=headers, params=params)\n                elif method.upper() == \"POST\":\n                    response = requests.post(url, headers=headers, json=params)\n                elif method.upper() == \"PUT\":\n                    response = requests.put(url, headers=headers, json=params)\n                elif method.upper() == \"DELETE\":\n                    response = requests.delete(url, headers=headers, params=params)\n                else:\n                    raise ValueError(f\"不支持的请求方法: {method}\")\n    \n                logger.info(f\"响应状态码: {response.status_code}\")\n                logger.info(f\"响应内容: {response.json()}\")\n    \n        with allure.step(\"验证响应状态码\"):\n            assert response.status_code == case[\"expected_status\"], \\\n                f\"预期状态码: {case['expected_status']}, 实际状态码: {response.status_code}\"\n    \n        with allure.step(\"验证响应内容\"):\n            if case[\"assert_key\"] and case[\"assert_value\"]:\n                response_data = response.json()\n                assert case[\"assert_key\"] in response_data, f\"响应中未找到字段: {case['assert_key']}\"\n>               assert response_data[case[\"assert_key\"]] == case[\"assert_value\"], \\\n                    f\"预期值: {case['assert_value']}, 实际值: {response_data[case['assert_key']]}\"\nE               AssertionError: 预期值: True, 实际值: False\nE               assert False == True\n\ntest_cases\\test_all_case.py:185: AssertionError"}, "steps": [{"name": "准备请求数据", "status": "passed", "start": 1741248059124, "stop": 1741248059126}, {"name": "发送请求", "status": "passed", "start": 1741248059126, "stop": 1741248060164}, {"name": "验证响应状态码", "status": "passed", "start": 1741248060164, "stop": 1741248060164}, {"name": "验证响应内容", "status": "failed", "statusDetails": {"message": "AssertionError: 预期值: True, 实际值: False\nassert False == True\n", "trace": "  File \"C:\\Users\\XIAOAN\\PycharmProjects\\xz_api_auto\\test_cases\\test_all_case.py\", line 185, in test_system\n    assert response_data[case[\"assert_key\"]] == case[\"assert_value\"], \\\n"}, "start": 1741248060164, "stop": 1741248060164}], "attachments": [{"name": "log", "source": "3db01a8e-f7ad-49ae-b99d-1b1318fa03c3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_name': '用户列表-加入分组', 'url': '/java/led/system/v1/platform/group/joinGroup', 'method': 'POST', 'params': {'groupId': 'f72f70aa-03bd-4990-8c3a-9107eac5e5ad', 'userIdList': ['5d38a479ebecea314c033e75b6b4255c']}, 'expected_status': 200, 'assert_key': 'suc', 'assert_value': True}"}], "start": 1741248059124, "stop": 1741248060165, "uuid": "76b1cd22-60d1-4542-8a38-a06571ace90e", "historyId": "d5829909789b325fbea8213c09d60907", "testCaseId": "7656ecbb55f1219e450d5aa4b68a6244", "fullName": "test_cases.test_all_case.TestCaseExe#test_system", "labels": [{"name": "feature", "value": "接口测试"}, {"name": "story", "value": "saasSystem接口测试"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_all_case"}, {"name": "subSuite", "value": "TestCaseExe"}, {"name": "host", "value": "DESKTOP-ETO8KH8"}, {"name": "thread", "value": "22044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_all_case"}]}